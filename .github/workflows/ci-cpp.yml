# C++ CI
name: C++ CI

on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'media/**'
      - '**.md'
  pull_request:
    branches:
      - main
      - feature/**
    paths-ignore:
      - 'docs/**'
      - 'media/**'
      - '**.md'

jobs:
  build-linux-x86:
    name: C++ CI - Linux/x86_64
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21
          java-package: jre

      - name: Configure GCC 14 as default
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-14 100

      - name: Setup Mold
        uses: rui314/setup-mold@v1

      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1

      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build graphviz pipx uuid-dev

#      - name: Setup Valgrind
#        if: github.event_name == 'pull_request'
#        run: sudo apt-get install valgrind

      - name: Setup Gcovr
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: sudo pipx install gcovr

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: /home/runner/work/spice/llvm
          key: llvm-21.1.0-rc3-linux-x64

      - name: Setup LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          cd ..
          rm -rf llvm
          git clone --depth 1 --branch llvmorg-21.1.0-rc3 https://github.com/llvm/llvm-project llvm
          mkdir ./llvm/build
          cd ./llvm/build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS_RELEASE="-O2" -DLLVM_ENABLE_RTTI=ON -GNinja ../llvm
          cmake --build .

      - name: Download Libs
        run: |
          chmod +x setup-libs.sh
          ./setup-libs.sh

      - name: Build test target
#        if: github.event_name != 'pull_request'
        env:
          LLVM_DIR: /home/runner/work/spice/llvm/build/lib/cmake/llvm
        run: |
          echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
          mkdir ./bin
          cd ./bin
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DSPICE_BUILT_BY="ghactions" -DSPICE_LINK_STATIC=OFF -DSPICE_LTO=ON -DSPICE_RUN_COVERAGE=ON -GNinja -Wattributes ..
          cmake --build . --target spicetest

#      - name: Build Test target
#        if: github.event_name == 'pull_request'
#        env:
#          LLVM_DIR: /home/runner/work/spice/llvm/build/lib/cmake/llvm
#        run: |
#          echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
#          mkdir ./bin
#          cd ./bin
#          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DSPICE_BUILT_BY="ghactions" -DSPICE_PROF_COMPILE=ON -DSPICE_LINK_STATIC=OFF -DSPICE_RUN_COVERAGE=ON -GNinja -Wattributes ..
#          cmake --build . --target spicetest

      - name: Run Test target
#        if: github.event_name != 'pull_request'
        env:
          LLVM_LIB_DIR: /home/runner/work/spice/llvm/build/lib
          LLVM_INCLUDE_DIR: /home/runner/work/spice/llvm/llvm/include
          LLVM_BUILD_INCLUDE_DIR: /home/runner/work/spice/llvm/build/include
          SPICE_STD_DIR: /home/runner/work/spice/spice/std
          SPICE_BOOTSTRAP_DIR: /home/runner/work/spice/spice/src-bootstrap
        run: |
          cd ./bin/test
          ./spicetest --is-github-actions

#      - name: Run Test target with Valgrind
#        if: github.event_name == 'pull_request'
#        env:
#          LLVM_LIB_DIR: /home/runner/work/spice/llvm/build/lib
#          LLVM_INCLUDE_DIR: /home/runner/work/spice/llvm/llvm/include
#          LLVM_BUILD_INCLUDE_DIR: /home/runner/work/spice/llvm/build/include
#          SPICE_STD_DIR: /home/runner/work/spice/spice/std
#          SPICE_BOOTSTRAP_DIR: /home/runner/work/spice/spice/src-bootstrap
#        run: |
#          cd ./bin/test
#          valgrind -q --leak-check=full ./spicetest --is-github-actions --leak-detection

      - name: Generate coverage report
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd ./bin
          sudo chmod +x coverage.sh
          ./coverage.sh

      - name: Upload coverage report - coverage.spicelang.com
        uses: sebastianpopp/ftp-action@releases/v2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          host: ${{ secrets.FTP_SERVER }}
          user: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          localDir: ./bin/coverage
          remoteDir: chillibits.com/spice/coverage

  build-linux-aarch64:
    name: C++ CI - Linux/AArch64
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21
          java-package: jre

      - name: Configure GCC 14 as default
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-14 100

      - name: Setup Mold
        uses: rui314/setup-mold@v1

      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1

      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build graphviz uuid-dev

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: /home/runner/work/spice/llvm
          key: llvm-21.1.0-rc3-linux-aarch64

      - name: Setup LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          cd ..
          rm -rf llvm
          git clone --depth 1 --branch llvmorg-21.1.0-rc3 https://github.com/llvm/llvm-project llvm
          mkdir ./llvm/build
          cd ./llvm/build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS_RELEASE="-O2" -DLLVM_ENABLE_RTTI=ON -GNinja ../llvm
          cmake --build .

      - name: Download Libs
        run: |
          chmod +x setup-libs.sh
          ./setup-libs.sh

      - name: Build test target
        env:
          LLVM_DIR: /home/runner/work/spice/llvm/build/lib/cmake/llvm
        run: |
          echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
          mkdir ./bin
          cd ./bin
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DSPICE_BUILT_BY="ghactions" -DSPICE_LINK_STATIC=OFF -DSPICE_LTO=ON -GNinja -Wattributes ..
          cmake --build . --target spicetest

      - name: Run Test target
        env:
          LLVM_LIB_DIR: /home/runner/work/spice/llvm/build/lib
          LLVM_INCLUDE_DIR: /home/runner/work/spice/llvm/llvm/include
          LLVM_BUILD_INCLUDE_DIR: /home/runner/work/spice/llvm/build/include
          SPICE_STD_DIR: /home/runner/work/spice/spice/std
          SPICE_BOOTSTRAP_DIR: /home/runner/work/spice/spice/src-bootstrap
        run: |
          cd ./bin/test
          ./spicetest --is-github-actions

  build-windows:
    name: C++ CI - Windows/x86_64
    runs-on: windows-2025

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21
          java-package: jre

#      - name: Setup latest GCC
#        shell: pwsh
#        run: |
#          choco uninstall mingw --all-versions
#          choco uninstall llvm --all-versions
#          Remove-Item -Recurse -Force C:\Strawberry
#          Remove-Item -Recurse -Force C:\mingw64
#          echo "Uninstalling done."
#          Invoke-WebRequest https://github.com/brechtsanders/winlibs_mingw/releases/download/14.2.0posix-12.0.0-ucrt-r3/winlibs-x86_64-posix-seh-gcc-14.2.0-llvm-19.1.7-mingw-w64ucrt-12.0.0-r3.7z -OutFile mingw64.7z
#          echo "Downloading done."
#          7z x mingw64.7z -oC:\
#          echo "Unpacking done."
#          Copy-Item -Path C:\mingw64\bin\mingw32-make.exe -Destination C:\mingw64\bin\make.exe
#          echo "All done."

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/llvm
          key: llvm-21.1.0-rc3-win-x64

      - name: Setup LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 --branch llvmorg-21.1.0-rc3  https://github.com/llvm/llvm-project.git llvm
          setx /M PATH "%PATH%;C:\mingw64\bin"
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          echo "Adding MinGW to path done."
          mkdir ./llvm/build
          cd ./llvm/build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS_RELEASE="-O2" -DLLVM_ENABLE_RTTI=ON -GNinja ../llvm
          cmake --build .

      - name: Download Libs
        run: .\setup-libs.bat

      - name: Install Graphviz
        run: |
          choco install graphviz -y
          echo "C:\Program Files\Graphviz\bin" >> $env:GITHUB_PATH
          dot -V

      - name: Build test target
        env:
          LLVM_DIR: ${{ github.workspace }}/llvm/build/lib/cmake/llvm
        run: |
          setx /M PATH "%PATH%;C:\mingw64\bin"
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          echo "Adding MinGW to path done."
          mkdir ./bin
          cd ./bin
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DSPICE_BUILT_BY="ghactions" -DSPICE_LINK_STATIC=OFF -GNinja -Wattributes ..
          cmake --build . --target spicetest

      - name: Run Test target
        env:
          LLVM_LIB_DIR: ${{ github.workspace }}/llvm/build/lib
          LLVM_INCLUDE_DIR: ${{ github.workspace }}/llvm/llvm/include
          LLVM_BUILD_INCLUDE_DIR: ${{ github.workspace }}/llvm/build/include
          SPICE_STD_DIR: ${{ github.workspace }}/std
          SPICE_BOOTSTRAP_DIR: ${{ github.workspace }}/src-bootstrap
        run: |
          setx /M PATH "%PATH%;C:\mingw64\bin"
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          echo "Adding MinGW to path done."
          cd ./bin/test
          ./spicetest --is-github-actions
